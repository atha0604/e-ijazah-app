exports.saveSekolah = async (req, res) => {
    const { mode, sekolahData, originalKodeBiasa } = req.body;
    if (!mode || !sekolahData) return res.status(400).json({ success: false, message: 'Data yang dikirim tidak lengkap.' });

    const db = getDbConnection();
    try {
        if (mode === 'add') {
            const sql = `INSERT INTO sekolah (kodeBiasa, kodePro, kecamatan, npsn, namaSekolahLengkap, namaSekolahSingkat) VALUES (?, ?, ?, ?, ?, ?)`;
            await run(db, sql, sekolahData);
        } else { // mode 'edit'
            const [newKodeBiasa, kodePro, kecamatan, npsn, namaSekolahLengkap, namaSekolahSingkat] = sekolahData;
            
            // Jika kodeBiasa berubah, gunakan pendekatan INSERT-DELETE
            if (newKodeBiasa !== originalKodeBiasa) {
                console.log(`Updating kodeBiasa from ${originalKodeBiasa} to ${newKodeBiasa}`);
                
                await run(db, 'BEGIN TRANSACTION');
                await run(db, 'PRAGMA foreign_keys = OFF');
                
                try {
                    // Cek apakah ada data duplicate dengan field lain sebelum insert
                    console.log('Checking for duplicate data before insert...');
                    const [_, kodePro, kecamatan, npsn, namaSekolahLengkap, namaSekolahSingkat] = sekolahData;
                    
                    // Cek duplicate NPSN
                    if (npsn) {
                        const existingNpsn = await queryAll(db, 'SELECT kodeBiasa FROM sekolah WHERE npsn = ? AND kodeBiasa != ?', [npsn, originalKodeBiasa]);
                        if (existingNpsn.length > 0) {
                            throw new Error(`NPSN "${npsn}" sudah digunakan oleh sekolah dengan kode: ${existingNpsn[0].kodeBiasa}`);
                        }
                    }
                    
                    // Cek duplicate nama sekolah lengkap
                    if (namaSekolahLengkap) {
                        const existingNama = await queryAll(db, 'SELECT kodeBiasa FROM sekolah WHERE namaSekolahLengkap = ? AND kodeBiasa != ?', [namaSekolahLengkap, originalKodeBiasa]);
                        if (existingNama.length > 0) {
                            throw new Error(`Nama sekolah lengkap "${namaSekolahLengkap}" sudah digunakan oleh sekolah dengan kode: ${existingNama[0].kodeBiasa}`);
                        }
                    }
                    
                    // 1. Insert data sekolah baru
                    await run(db, `INSERT INTO sekolah (kodeBiasa, kodePro, kecamatan, npsn, namaSekolahLengkap, namaSekolahSingkat) VALUES (?, ?, ?, ?, ?, ?)`, 
                        sekolahData);
                    
                    // 2. Update semua referensi foreign key
                    await run(db, `UPDATE siswa SET kodeBiasa = ? WHERE kodeBiasa = ?`, [newKodeBiasa, originalKodeBiasa]);
                    await run(db, `UPDATE settings SET kodeBiasa = ? WHERE kodeBiasa = ?`, [newKodeBiasa, originalKodeBiasa]);
                    
                    try {
                        await run(db, `UPDATE mulok_names SET kodeBiasa = ? WHERE kodeBiasa = ?`, [newKodeBiasa, originalKodeBiasa]);
                    } catch (mulokError) {
                        console.log('mulok_names table might not exist, skipping...');
                    }
                    
                    // 3. Hapus data sekolah lama
                    await run(db, `DELETE FROM sekolah WHERE kodeBiasa = ?`, [originalKodeBiasa]);
                    
                    await run(db, 'PRAGMA foreign_keys = ON');
                    await run(db, 'COMMIT');
                } catch (error) {
                    await run(db, 'PRAGMA foreign_keys = ON');
                    await run(db, 'ROLLBACK');
                    throw error;
                }
            } else {
                // Jika kodeBiasa tidak berubah, update biasa saja
                console.log('Updating sekolah without changing kodeBiasa...');
                console.log('Data to update:', [kodePro, kecamatan, npsn, namaSekolahLengkap, namaSekolahSingkat, originalKodeBiasa]);
                
                // Cek duplicate data sebelum update
                if (npsn) {
                    const existingNpsn = await queryAll(db, 'SELECT kodeBiasa FROM sekolah WHERE npsn = ? AND kodeBiasa != ?', [npsn, originalKodeBiasa]);
                    if (existingNpsn.length > 0) {
                        throw new Error(`NPSN "${npsn}" sudah digunakan oleh sekolah lain dengan kode: ${existingNpsn[0].kodeBiasa}`);
                    }
                }
                
                if (namaSekolahLengkap) {
                    const existingNama = await queryAll(db, 'SELECT kodeBiasa FROM sekolah WHERE namaSekolahLengkap = ? AND kodeBiasa != ?', [namaSekolahLengkap, originalKodeBiasa]);
                    if (existingNama.length > 0) {
                        throw new Error(`Nama sekolah "${namaSekolahLengkap}" sudah digunakan oleh sekolah lain dengan kode: ${existingNama[0].kodeBiasa}`);
                    }
                }
                
                const sql = `UPDATE sekolah SET kodePro = ?, kecamatan = ?, npsn = ?, namaSekolahLengkap = ?, namaSekolahSingkat = ? WHERE kodeBiasa = ?`;
                await run(db, sql, [kodePro, kecamatan, npsn, namaSekolahLengkap, namaSekolahSingkat, originalKodeBiasa]);
            }
        }
        res.json({ success: true, message: `Data sekolah berhasil di${mode === 'add' ? 'tambahkan' : 'perbarui'}.` });
    } catch (error) {
        console.error('Save Sekolah error:', error.message);
        res.status(500).json({ success: false, message: 'Gagal menyimpan data sekolah: ' + error.message });
    } finally {
        db.close();
    }
};

// Menyimpan satu data nilai
exports.saveGrade = async (req, res) => {
    const { nisn, semester, subject, type, value } = req.body;
    if (nisn === undefined || semester === undefined || subject === undefined || type === undefined) {
        return res.status(400).json({ success: false, message: 'Data nilai tidak lengkap.' });
    }
    const db = getDbConnection();
    try {
        const sql = `INSERT OR REPLACE INTO nilai (nisn, semester, subject, type, value) VALUES (?, ?, ?, ?, ?)`;
        await run(db, sql, [nisn, semester, subject, type, value || '']);
        res.json({ success: true, message: 'Nilai tersimpan.' });
    } catch (error) {
        console.error('Save Grade error:', error.message);
        res.status(500).json({ success: false, message: 'Gagal menyimpan nilai.' });
    } finally {
        db.close();
    }
};

// Menyimpan banyak nilai sekaligus (bulk)
exports.saveBulkGrades = async (req, res) => {
    const gradesToSave = req.body;
    if (!gradesToSave || !Array.isArray(gradesToSave)) {
        return res.status(400).json({ success: false, message: 'Data yang dikirim tidak valid.' });
    }
    const db = getDbConnection();
    try {
        await run(db, "BEGIN TRANSACTION");
        const stmt = db.prepare("INSERT OR REPLACE INTO nilai (nisn, semester, subject, type, value) VALUES (?, ?, ?, ?, ?)");
        gradesToSave.forEach(grade => {
            stmt.run(grade.nisn, grade.semester, grade.subject, grade.type, grade.value || '');
        });
        stmt.finalize();
        await run(db, "COMMIT");
        res.json({ success: true, message: `Berhasil menyimpan ${gradesToSave.length} data nilai.` });
    } catch (error) {
        await run(db, "ROLLBACK");
        console.error('Save Bulk Grades error:', error);
        res.status(500).json({ success: false, message: 'Gagal menyimpan nilai bulk ke server.' });
    } finally {
        db.close();
    }
};

// Memperbarui data siswa
exports.updateSiswa = async (req, res) => {
    const { nisn, updatedData } = req.body;
    if (!nisn || !updatedData) return res.status(400).json({ success: false, message: 'Data update tidak lengkap.' });

    const db = getDbConnection();
    try {
        const fieldMap = {
            nis: 'noInduk', noPeserta: 'noPeserta', nisn: 'nisn',
            namaPeserta: 'namaPeserta', ttl: 'ttl', namaOrtu: 'namaOrtu',
            noIjazah: 'noIjazah', foto: 'foto'
        };

        const fieldsToUpdate = Object.keys(updatedData)
            .filter(key => fieldMap[key])
            .map(key => `${fieldMap[key]} = ?`);

        if (fieldsToUpdate.length === 0) {
            return res.status(400).json({ success: false, message: 'Tidak ada field valid untuk diupdate.' });
        }

        const values = Object.keys(updatedData)
            .filter(key => fieldMap[key])
            .map(key => updatedData[key]);

        const sql = `UPDATE siswa SET ${fieldsToUpdate.join(', ')} WHERE nisn = ?`;
        await run(db, sql, [...values, nisn]);
        res.json({ success: true, message: 'Data siswa berhasil diperbarui.' });
    } catch (error) {
        console.error('Update Siswa error:', error);
        res.status(500).json({ success: false, message: 'Gagal memperbarui data siswa di server.' });
    } finally {
        db.close();
    }
};

// Menyimpan pengaturan
exports.saveSettings = async (req, res) => {
    const { schoolCode, settingsData, mulokNamesData } = req.body;
    if (!schoolCode) return res.status(400).json({ success: false, message: 'Kode sekolah tidak ada.' });

    const db = getDbConnection();
    try {
        await run(db, "BEGIN TRANSACTION");

        if (settingsData) {
            const existing = await queryAll(db, "SELECT settings_json FROM settings WHERE kodeBiasa = ?", [schoolCode]);
            const existingSettings = existing.length > 0 ? JSON.parse(existing[0].settings_json) : {};
            const newSettings = { ...existingSettings, ...settingsData };
            await run(db, "INSERT OR REPLACE INTO settings (kodeBiasa, settings_json) VALUES (?, ?)", [schoolCode, JSON.stringify(newSettings)]);
        }

        if (mulokNamesData) {
            for (const mulokKey in mulokNamesData) {
                await run(db, "INSERT OR REPLACE INTO mulok_names (kodeBiasa, mulok_key, mulok_name) VALUES (?, ?, ?)", [schoolCode, mulokKey, mulokNamesData[mulokKey]]);
            }
        }

        await run(db, "COMMIT");
        res.json({ success: true, message: 'Pengaturan berhasil disimpan.' });
